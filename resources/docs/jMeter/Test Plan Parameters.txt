Ref:
	- https://www.tutorialspoint.com/jmeter/jmeter_overview.htm
	- https://www.blazemeter.com/blog/what%E2%80%99s-the-max-number-of-users-you-can-test-on-jmeter
	- https://www.guru99.com/jmeter-element-reference.html

========================================================================================================================
	Build Test Plan
========================================================================================================================
- A Test Plan can be viewed as a container for running tests. It defines what to test and how to go about it. A complete
test plan consists of one or more elements such as thread groups, logic controllers, sample-generating controllers,
listeners, timers, assertions, and configuration elements. A test plan must have at least one thread group.

- A Test Plan comprises of at least one Thread Group. Within each Thread Group, we may place a combination of one or
more of other elements − Sampler, Logic Controller, Configuration Element, Listener, and Timer. Each Sampler can be
preceded by one or more Pre-processor element, followed by Post-processor element, and/or Assertion element.

- Execution Order of Test Elements:
1. Select number of test users with Thread Group:
    - Right click on the Test Plan and add a new thread group: Add -> Threads (Users) -> Thread Group
    - Action to be taken after a Sampler error: in case any error occurs during test execution
        . Continue: to the next element in the test
        . Stop Thread: to stop the current Thread
        . Stop Test: to stop completely, in case you want to inspect the error before it continues running
    - Number of Threads: number of users or connections to your server application
    - Loop Count: Number of times a single user execute the test scenario
    - Ramp-Up Period: how long to delay before starting next user. For example, if we have 100 users and a 100 seconds
    Ramp-Up period, then the delay between starting users would be 1 second (100 users /100 seconds)
    - Scheduler Configuration − You can configure the start and end time(duration) of running the test

2. Add default or variable via Configuration Elements:
    - Web Test Plan:
        . HTTP request Default:
            . Right-clicking on the Thread Group and selecting: Add -> Config Element -> HTTP Request Defaults
            . In the HTTP Request Defaults control panel, enter the default URL for testing, for example: google.com.vn
    - Database Test Plan:


3. Add logic controller:
    - Simple Controller: is just a container for user request
    - Loop Controller: makes the user request run specified number of times or run forever
    - Random Controller: makes all the user requests run in random order in each loop period
    - Module Controller: The goal of Module Controller is to add modularity to JMeter. The general idea is that web
    applications consist of small units of functionality (i.e. Logon, Create Account, ...). This functionality can be
    stored in Simple Controller as "modules".  Module Controller will choose which module needs to run. Consider example:
    You want to simulate: 50 users logging out, 100 users logging in, 30 users search www.google.com
    - Interleave Controller: picks up and makes one of user request run in each loop of the thread.
    - Runtime Controller: controls how long its children are allowed to run
    - Transaction Controller: measures the overall time taken to finish a test execution
    - nclude Controller: is designed to use an external test plan. This controller allows you to use multiple test plans
    in JMeter.
    - Example with Web Test Plan with a loop controller:
        . Add one HTTP Request to a Loop Controller with a loop count 50
        . Configure the Thread Group loop count to 2
        . Then, JMeter will send a total of 50 * 2 = 100 HTTP Requests.

4. Pre-Processors
    - Consider a simple example: let's say you wanted JMeter to "spider" through website under test, parse link(check
    all links on the page) and return the HTML, pre-processor will do above task.

5. Timers:
    - Constant Timer:
        . Thread delay: Amount of delay timer time for each user request
    - Gaussian Random Timer:
        . Deviations: parameter of Gaussian Distribution Function
        . Constant Delay Offset: Additional value in milliseconds
        => So the total delay equals Deviations plus Constant Delay Offset
    - Uniform Random Timer:
        . Random Delay Maximum: Maximum random number of milliseconds to delay
        . Constant Delay Offset: Additional value in milliseconds

6. Select Sampler type:
    - Web Test Plan:
        . HTTP Request:
            . Right-click on Thread Group and select: Add -> Sampler -> HTTP Request
            . In HTTP Request Control Panel, the Path field indicates what optional URI link
            . Example: you enter "calendar" in Path field so the URL request is sent to http://www.google.com/calendar
    - Database Test Plan:

7. Post-Processors (unless SampleResult is null)
    - Consider a simple example: JMeter send HTTP request to the web server under test (etc www.google.com) and get the
    response. You want JMeter to stop the testif the server response is error, post-processor will do above task.

8. Assertions
    - Response Assertion: lets you add pattern strings to be compared against various fields of the server response
    - Duration Assertion: tests that each server response was received within a given amount of time
    - Size Assertion: tests that each server response contains the expected number of byte in it
    - HTML Assertion: allows the user to check the HTML syntax of the response data. It means the response data must be
    met the HTML syntax.
    - XML Assertion: tests that the response data consists of a formally correct XML document format

9. Select test result in Graph format:
    - View Results in Graph: Right click Test Plan, Add -> Listener -> Graph Results
        . Black: The total number of current samples sent
        . Blue: The current average of all samples sent
        . Red: The current standard deviation
        . Green: Throughput rate that represents the number of requests per minute the server handled
    - View Results in Table: Right click Add -> Listener -> View Result in Table
    - Assertion Results table: Right click Thread Group, Add -> Listener -> Assertion Results

10. Run Test and get the test result
    - Press Run button (Ctrl + R) on Toolbar to start the software testing process
    - To analyze the performance of the web server under test, you should focus on 2 parameters
        . Throughput: represents the ability of the server to handle heavy load, the higher the Throughput, the better
        server performance
        . Deviation: indicates the deviation from the average, the smaller the better.


========================================================================================================================
    Web Test Plan
========================================================================================================================



========================================================================================================================
    Database Test Plan
========================================================================================================================



========================================================================================================================
    Webservice Test Plan
========================================================================================================================





    - Counter
    - CSV Data Set Config
    - FTP Request Defaults
    - HTTP Authorization Manager
    - HTTP Cache Manager
    - HTTP Cookie Manager
    - HTTP Proxy Server
    - HTTP Request Default
    - HTTP Header Manager
    - Java Request Defaults
    - Keystore Configuration
    - JDBC Connection Configuration
    - Login Config Element
    - LDAP Request Defaults
    - LDAP Extended Request Defaults
    - TCP Sampler Config
    - User Defined Variables
    - Simple Config Element
    - Random Variable




Controllers
    - Samplers:
        . Samplers allow JMeter to send specific types of requests to a server
        . They simulate a user request for a page from the target server. EX, you can add a HTTP Request sampler if you
        need to perform a POST, GET, or DELETE on a HTTP service
        . Some useful samplers are: HTTP Request, FTP Request, JDBC Request, Java Request, SOAP/XML Request, RPC Requests
    - Logic Controllers:
        . Logic Controllers let you control the order of processing of Samplers in a Thread
        . Logic controllers can change the order of a request coming from any of their child elements. Some examples are,
        ForEach Controller, While Controller, Loop Controller, IF Controller, Run Time Controller, Interleave Controller,
        Throughput Controller, and Run Once Controller
        . The following list consists of all the Logic Controllers JMeter provides: Simple Controller, Loop Controller,
        Once Only Controller, Interleave Controller, Random Controller, Random Order Controller, Throughput Controller,
        Runtime Controller, If Controller, While Controller, Switch Controller, ForEach Controller, Module Controller,
        Include Controller, Transaction Controller, Recording Controller

3. Test Fragments:
    - Test Fragment is a special type of element placed at the same level as the Thread Group element.
    - It is distinguished from a Thread Group in that it is not executed unless it is referenced by either a Module
    Controller or an Include_Controller. This element is purely for code re-use within Test Plans.

4. Listeners:
    - Listeners let you view the results of Samplers in the form of tables, graphs, trees, or simple text in some log
    files. They provide visual access to the data gathered by JMeter about the test cases as a Sampler component of
    JMeter is executed
    - Listeners can be added anywhere in the test, including directly under the test plan. They will collect data only
    from elements at or below their level. The following list consists of all the Listeners JMeter provides:
        . Sample Result Save Configuration
        . Graph Full Results
        . Graph Results
        . Spline Visualizer
        . Assertion Results
        . View Results Tree
        . Aggregate Report
        . View Results in Table
        . Simple Data Writer
        . Monitor Results
        . Distribution Graph (alpha)
        . Aggregate Graph
        . Mailer Visualizer
        . BeanShell Listener
        . Summary Report

5. Timers
- By default, a JMeter thread sends requests without pausing between each sampler. This may not be what you want. You
can add a timer element which allows you to define a period to wait between each request.
- The following list shows all the timers that JMeter provides:
    . Constant Timer
    . Gaussian Random Timer
    . Uniform Random Timer
    . Constant Throughput Timer
    . Synchronizing Timer
    . JSR223 Time
    . BeanShell Time
    . BSF Time
    . Poisson Random Time

6. Assertions
- Assertions allow you to include some validation test on the response of your request made using a Sampler. Using
assertions you can prove that your application is returning the correct data. JMeter highlights when an assertion fails.
- The following list consists of all the assertions JMeter provides:
    . Beanshell Assertion
    . Compare Assertion
    . JSR223 Assertion
    . Response Assertion
    . Duration Assertion
    . Size Assertion
    . XML Assertion
    . BeanShell Assertion
    . MD5Hex Assertion
    . HTML Assertion
    . XPath Assertion
    . XML Schema Assertion


8. Pre-processor Elements
- A pre-processor element is something that runs just before a sampler executes.
- They are often used to modify the settings of a Sample Request just before it runs, or to update variables that are
not extracted from response text.

9. Post-processor Elements
- A post-processor executes after a sampler finishes its execution.
- This element is most used to process the response data, for example, to retrieve a particular value for later use.

10. Execution Order of Test Elements:
    - Configuration elements
    - Pre-Processors
    - Timers
    - Sampler
    - Post-Processors (unless SampleResult is null)
    - Assertions (unless SampleResult is null)
    - Listeners (unless SampleResult is null)

========================================================================================================================
    Web Test Plan
========================================================================================================================


========================================================================================================================
    Database Test Plan
========================================================================================================================



========================================================================================================================
    Webservice Test Plan
========================================================================================================================



========================================================================================================================
    Monitor Test Plan
========================================================================================================================




========================================================================================================================
    Listeners
========================================================================================================================



========================================================================================================================
    Web Test Plan
========================================================================================================================
