Ref:
    1. https://docs.docker.com/docker-for-windows/install/#about-windows-containers

========================================================================================================================
    Introducing Docker
========================================================================================================================
+ In a traditional VM setup, you would take a machine, install an operating system on that machine, and then install a
hypervisor such as VirtualBox or VMware. You could then create a VM image on the hypervisor, which pretends to be a
computer. This image would have its own BIOS and emulated hardware. You would then install an OS (operating system) on
this image. This is generally referred to as the guest OS.

+ Once this is done, you would boot up the guest OS and treat it like any other computer. If you want to isolate your
applications, you can create multiple guest operating systems, but this can be costly.
       ||-----------|-----------|-----------||
       || App 1     | App 2     | App 3     ||
       ||-----------|-----------|-----------||
       || Bins/Libs | Bins/Libs | Bins/Libs ||
       ||-----------|-----------|-----------||
       || Guest OS  | Guest OS  | Guest OS  ||          Traditional virtual machine
       ||-----------|-----------|-----------||
       ||             Hypervisor            ||
       ||-----------------------------------||
       ||        Host Operating System      ||
       ||-----------------------------------||
       ||           Infrastructure          ||
       ||-----------------------------------||

+ Docker is like a VM but slightly different. It is a program that you install on the host machine instead of the
hypervisor. Docker can then start up an application in what is known as a container. Containers are totally isolated,
just like a virtual machine. However,  Docker uses the host OS instead of a guest OS.
       ||-----------|-----------|-----------||
       || App 1     | App 2     | App 3     ||
       ||-----------|-----------|-----------||
       || Bins/Libs | Bins/Libs | Bins/Libs ||
       ||-----------------------------------||
       ||           Docker Engine           ||          Docker alternative
       ||-----------------------------------||
       ||          Operating System         ||
       ||-----------------------------------||
       ||           Infrastructure          ||
       ||-----------------------------------||

+ This gives you some advantages, which are as follows:
    - Containers are not as resource-intensive as virtual machine
    - Containers can start up much faster than virtual machines

+ How does Docker do this? Well, it uses a Linux technology called namespaces. The following are the Linux namespaces:
    - pid: This is used for process isolation
    - net: This is used to manage network interfaces
    - ipc: This is used to manage interprocess communication
    - mnt: This is used to manage mount points
    - uts: This is used to isolate kernel and version identifiers
Docker uses these namespaces to isolate containers. This means that they are unaware of anything else that is running on
the host OS. These containers have their own isolated process tree, their own isolated network stack, and so on.

+ The wonderful thing about Docker is that all of these containers can be made to interact with each other. This means
that you can take lots of individual containers and stick them together to make something quite complex.

+ For example, a basic LNMP (Linux, Nginx, MySQL, and PHP) setup.
    - Normally, you would create a Linux virtual machine and then install Nginx, PHP and MySQL on it.
    - With Docker, you can split up this stack with multiple containers. The most common setup is an Nginx container
     with added PHP support and a MySQL container. You can then link these two containers together to give you the LNMP
     stack
    - If you wanted to update MySQL, you would just delete the MySQL container and add a new one. Wait a second! If I
    delete MySQL and start it up again, would I lose all my data? Well, that's not a problem. Docker can also create
    data-only containers. So, you can create a data-only container that holds all the data that MySQL writes to the
    disk that is totally isolated from the MySQ

========================================================================================================================
    Installation Docker on Window 10
========================================================================================================================
+ Download and install docker for window at:
