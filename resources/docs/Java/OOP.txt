Reference:
    1. https://www.javatpoint.com/java-oops-concepts
    2. https://web.archive.org/web/20071214085409/http://www.itmweb.com/essay550.htm

========================================================================================================================
	OOPs Java (In class-based programming)
========================================================================================================================
- Class: is a “template”/“blueprint” that is used to create objects. Class will consists of field, static field, method,
static method and constructor. Field (variable) is used to hold the state of the class. Method is used to represent the
behavior of the class. Constructor is used to create a new Instance of the Class.

- Object: is an instance of a class, and may be called a class instance or class object; instantiation is also known as
construction (Not all classes can be instantiated - Abstract class)

- Instance: is a unique copy of a Class that representing an Object. When a new instance of a class is created, the JVM
will allocate a room of memory for that class instance.

- Inheritance: When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It
provides code reusability. It is used to achieve runtime polymorphism.

-Polymorphism: When one task is performed by different ways i.e. known as polymorphism. For example: to convince the
customer differently, to draw something e.g. shape or rectangle etc. In java, we use method overloading and method
overriding to achieve polymorphism.

- Abstraction: Hiding internal details and showing functionality is known as abstraction. For example: phone call, we
don't know the internal processing. In java, we use abstract class and interface to achieve abstraction.

==> Through the use of Classes, we implement all three concepts - Abstraction, Information Hiding and Encapsulation


========================================================================================================================
	Class
========================================================================================================================
- When you declare a class to be public, you must declare the class in a file whose name is exactly the same as the name
of the class (but with the .java extension added). For example, if you declare public class MyImportantCode , you must
put the class's code in a file named MyImportantCode.java. In other words, you can't declare two public classes in one
.java file.
- The parentheses contain all the things you’re going to pass to the method when you call it.

- EX:
// The Account class is public, a public class is available for use by all other classes
public class Account {
	// A variable declared inside a class but not inside any particular method is a field or instance variable. These are members of this class.
	String name;
	String address;
	double balance;

	// display method is public, means any code can call a public method, even if the calling code and the public method belong to two different classes.
	// The word "void" tells Java that when the display method is called, the display method doesn’t return anything.
	public void display() {
		System.out.print(name);
		System.out.print(" (");
		System.out.print(address);
		System.out.print(") has $");
		System.out.print(balance);
	}

	// The word double tells Java that when getInterest method is called, it returns a double value back to the place that called it.
	// The parentheses contain all the things that you pass to the method when you call it.
	public double getInterest(double percentageRate) {
		return balance * percentageRate / 100.00;
	}
}

public class UseAccount {	
	public static void main(String args[]) {
		// reserve the variable name myAccount so that the name can eventually refer to an instance of Account class
		// When a variable has a reference type, simply declaring the variable isn’t enough
		// You don’t get an object until you call a constructor and use the keyword new .
		Account myAccount;	  			
		// myAccount object creates and refers to an instance of Account class
		myAccount = new Account();		
		// yourAccount object creates and now refers to an instance of Account class
		Account yourAccount = new Account();	
		
		myAccount.name = "Barry Burd";
		yourAccount.name = "Allen Spear";
		myAccount.address = "222 Cyberspace Lane";
		yourAccount.address = "999 CMT8";
		myAccount.balance = 24.02;
		yourAccount.balance = 100;
		
		// print out data of myAccount. When you call a method, you put parentheses after the method’s name
		myAccount.display();
		
		out.print(" plus $");
		out.print(myAccount.getInterest(5.00));
		out.println(" interest ")
	}
}


========================================================================================================================
	Constructors: initialize Object/Instance
========================================================================================================================
- A constructor tells the Java to perform a new object’s start-up tasks.
- A constructor name must be same as its class name and have no explicit return type.
- A class can have multiple constructors. Each constructor has different parameter list, each parameter is separated from
another with a comma. To call a specific constructor, you have to match the parameters in the call with the	parameters
in the declaration.
- When there is no constructor declarations in the code, Java automatically creates a default constructor (no parameter)
for that class.
- EX:
    public class Temperature() {
    	private double temp = 0;
    	private string location;

    	// Default constructor
    	public Temperature(){ };
    	// Parameterized constructor 1 with 1 parameter
    	public Temperature(double t){
    		// this keyword refers the new object’s field
    		this.temp = t;
    	};
    	// Parameterized Constructor 2 with 2 parameter
    	public Temperature(double t, string l){
    		this.temp = t;
    		this.location = l;
    	};
    }
    public class UseTemperature(){
    	// Initiate temp object via default constructor
    	Temperature temp = new Temperature();
    	// Initiate temp1 object via parameterized constructor 2
    	Temperature temp1 = new Temperature(31.1);
    	// Initiate temp2 object via parameterized constructor 3
    	Temperature temp2 = new Temperature(100.0, 'Hell');
    }

- Constructor for sub class:
    public class TemperatureGood extends Temperature {
    	public TemperatureGood(){
    		super(); 		// re-use parent constructor
    	}
    	public TemperatureGood(double t){
    		super(t); 		// TemperatureGood has temp and location variable
    	}
    public TemperatureGood(double t, string l){ super(t, l); }
    	public void display() {
    		out.printf("%5.2f degrees %s\n", getNumber(), getScale());
    	}
    }


========================================================================================================================
	Java Inheritance
========================================================================================================================
Inheritance represents the (IS-A) relationship, also known as parent-child relationship.
    - Inheritance is a mechanism in which one object acquires all the properties and behaviors of parent object. When you
    inherit from an existing class, you can reuse methods and fields of parent class, and you can add new methods, fields
    or override parent method.
    - Types of inheritance in java (Note: multiple and hybrid inheritance is supported through interface only)
        . Single:       Class B  --> Class A
        . Multi-level:  Class C --> Class B --> Class A
        . Hierarchical: Class C --> Class B <-- Class A
        . Multiple:     Class C <-- Class B --> Class A
        . Hybrid: combine of Hierarchical and Multiple
    - Java only allow for single inheritance, for multiple inheritance use interface.
    - Sub-class attribute:
        . Sub class has all public/protected attributes and method from the parent class.
        . Subclasses don’t inherit constructors so we have to setup manually.
        . To access the parent class’s private fields, the child class has to call the parent class’s accessor methods.
        . Keyword 'extend' is used for creating a sub class.
    - EX: create a sub/child class FullTimeEmployee from parent/super class Employee
        public class FullTimeEmployee extends Employee {
            public paySalary(int hour){};
        };
    - Overriding Existing Methods from parent class:
        public class FullTimeEmployeeWithOvertime extends Employee {
            @Override		// this annotation is optional, code will work if method has same parent method name
            public paySalary(int hour){ //pay double };
        };


Aggregation represents (HAS-A) relationship:
    - If a class have an entity reference, it is known as Aggregation.
    - Consider a situation, Employee object contains many information such as id, name, email, Id etc. It contains one
    more object named address, which contains its own information such as city, state, country, zipcode etc. In such
    case, Employee has an entity reference address, so relationship is Employee HAS-A address.
        class Employee{
            String name;
            Address address;    //Address is a class
            ...
        }
    - When use Aggregation:
        . Code reuse is also best achieved by aggregation when there is no is-a relationship.
        . Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects
        involved; otherwise, aggregation is the best choice.

========================================================================================================================
	Java Polymorphism
========================================================================================================================



========================================================================================================================
	Abstraction is a technique that help us identify which specific information should be visible, and which information
	should be hidden. Abstractions allow us to think of complex things in a simpler way.
========================================================================================================================
In java, abstract class and interface are used to achieve abstraction.


At a high level, an API does provide a simpler abstraction for usage, blissfully unaware of the underlying complexity behind its internal design




========================================================================================================================
	Encapsulation is the technique for packaging all similar data and functions into a container (Class or Package) in
	such a way as to hide what should be hidden, and make visible what is intended to be visible
========================================================================================================================
Package:
	- Package is a grouping of related files (classes, interfaces and enumerations) providing access protection and
	namespace management (naming conflicts).
	- To create a package, you include "package" statement along with package name at the first line of every source
	files that you want to include in the same package. EX: package com.test.dung
	- If a package statement is not used then the class, interfaces, enumerations, and annotation types will be placed
	in the current default package.
    - Package inside the package is called the subpackage. It should be created to categorize the package further.
    Note: If you import a package, subpackages will not be imported.


Default access:
    - A private member is only accessible within the same class as it is declared.
    - A member with no access modifier is only accessible within classes in the same package.
    - A protected member is accessible within all classes in the same package and within subclasses in other packages.
    - A public member is accessible to all classes (unless it resides in a module that does not export the package it is
    declared in).
---------------------------------------------------------------------
            | Same    | Different Class | Different package | World |			+     : accessible
            | Class   | Same Package    | But Sub Class	    |       |			blank : not accessible
---------------------------------------------------------------------
 public     |    +    |        +        |         +         |   +   |
---------------------------------------------------------------------
 protected  |    +    |        +        |         +         |       |
---------------------------------------------------------------------
 no modifier|    +    |        +        |                   |       |
---------------------------------------------------------------------
 private    |    +    |                 |                   |       |
---------------------------------------------------------------------

Encapsulation also hide data (fields and methods) owned by a class instance which should be hidden and it is achieved
through Information Hiding. Information Hiding is hiding the internal data which prevents direct, external change to the
data by making them private and only modify via a controlled manner method.

Fields can be marked as readonly / final / immutable which further restricts change, even within the class.

For example, hiding the variables of the classes and enforce data access through the accessors (getters) and mutators
(setters). The role of accessors and mutators are to return and set the values of an object's state.

To achieve encapsulation in Java:
    public class Account {
        private String name;                // Set the variable to private
        public void setName(String n) {     // Create Mutator method
            name = n;
        }
        public String getName() {           // Create Accessors method
            return name;
        }
    }
    public class UseAccount {
        public static void main(String args[]) {
            Account myAccount = new Account();
            myAccount.setName("Barry Burd");
            out.print(myAccount.getName());
        }
    }





ENUM type:
	- Enum is a special Java type used to define collections of constants.
	- An enum can contain constants, methods etc...
	- EX:
		// Like the declaration of a class, an enum type declaration belongs in a file all its own, so this should belong to Level.java file
		public enum Level {
			HIGH (1), 		//calls constructor with value 1
			MEDIUM (2), 	//calls constructor with value 2
			LOW (3)			//calls constructor with value 3
			; 				// semicolon needed when fields - methods follow

			private final int levelCode;
			// Enum constructor
			Level(int levelCode) {
				this.levelCode = levelCode;
			}
			// Enum method
			public int getLevelCode() {
				return this.levelCode;
			}
		}
		
		public class Temp {
			public static void main(String args[]) {
				// Declares variable level to be of type Level mean level only has 3 kind of values in enum
				Level level = Level.HIGH;
				// Get of all the possible values of a Enum type (array result) by calling its static values() method
				for (Level level : Level.values()) {
					System.out.println(level);
				}
				// call an enum method via a reference to one of the constant values
				System.out.println(level.getLevelCode());
			}
		}

