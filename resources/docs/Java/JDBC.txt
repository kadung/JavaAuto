Reference:
    1. https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html
    2. https://www.javatpoint.com/java-jdbc

========================================================================================================================
	JDBC (Java Database Connectivity)
========================================================================================================================
- Before JDBC, ODBC API was the database API to connect and execute query with the database. But, ODBC API uses ODBC
driver which is written in C language (i.e. platform dependent and unsecured). That is why Java has defined its own API
(JDBC API) that uses JDBC drivers (written in Java language).

- In general, to process any SQL statement with JDBC, you follow these steps:
    1. Establishing a connection with the data source you want to use:
        - A data source can be a DBMS, a legacy file system, or some other source of data with a corresponding JDBC
        driver. Typically, a JDBC application connects to a target data source using one of two classes:
            . DriverManager: This fully implemented class connects an application to a data source, which is specified
            by a database URL. When this class first attempts to establish a connection, it automatically loads any JDBC
            4.0 drivers found within the class path. Note that your application must manually load any JDBC drivers prior
            to version 4.0
            . DataSource: This interface is preferred over DriverManager because it allows details about the underlying
            data source to be transparent to your application. A DataSource object's properties are set so that it
            represents a particular data source. See Connecting with DataSource Objects for more information. For more i
            nformation about developing applications with the DataSource class, see the latest The Java EE Tutorial
    2. Create a statement:
        - A Statement is an interface that represents a SQL statement. You execute Statement objects, and they generate
        ResultSet objects, which is a table of data representing a database result set.
        - You need a Connection object to create a Statement object.
    3. Execute the query:
        - To execute a query, call an execute method from Statement such as the following:
            . execute: Returns true if the first object that the query returns is a ResultSet object. Use this method if
            the query could return one or more ResultSet objects. Retrieve the ResultSet objects returned from the query
            by repeatedly calling Statement.getResultSet.
            . executeQuery: Returns one ResultSet object.
            . executeUpdate: Returns an integer representing the number of rows affected by the SQL statement. Use this
            method if you are using INSERT, DELETE, or UPDATE SQL statements.
    4. Process the ResultSet object:
        - You access the data in a ResultSet object through a cursor
        - Note that this cursor is not a database cursor, it is a pointer that points to one row of data in the ResultSet
        object. Initially, the cursor is positioned before the first row.
    5. Close the connection:
        - When you are finished using a Statement, call the method Statement.close to immediately release the resources
        it is using. When you call this method, its ResultSet objects are closed.


========================================================================================================================
	Establishing a Connection using the DriverManager Class
========================================================================================================================
- The method DriverManager.getConnection establishes a database connection. This method requires a database URL, which
varies depending on your DBMS. The following are some examples of database URLs:
    . MySQL: jdbc:mysql://localhost:3306/, where localhost is the name of the server hosting your database, and 3306 is
    the port number
    . Java DB: jdbc:derby:testdb;create=true, where testdb is the name of the database to connect to, and create=true
    instructs the DBMS to create the database.
- Specifying Database Connection with MySQL Database URL:
    . Syntax:
        jdbc:mysql://[host][,failoverhost...]
        [:port]/[database]
        [?propertyName1][=propertyValue1]
        [&propertyName2][=propertyValue2]...
    . host:port is the host name and port number of the computer hosting your database. If not specified, the default
    values of host and port are 127.0.0.1 and 3306, respectively
    . database is the name of the database to connect to. If not specified, a connection is made with no default database
    . failover is the name of a standby database (MySQL Connector/J supports failover)
    . propertyName=propertyValue represents an optional, ampersand-separated list of properties. These attributes enable
    you to instruct MySQL Connector/J to perform various tasks.


========================================================================================================================
	Create a statement
========================================================================================================================
1. Using Prepared Statements:
