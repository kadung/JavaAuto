Ref:
	- http://tutorials.jenkov.com/java/index.html

=========================================================================================================
	About Java
=========================================================================================================
Java is object-oriented language, Object-oriented languages focus on data. In an object-oriented language, you use objects and classes to organize your data.
Because Java is an object-oriented programming language, your primary goal is to describe classes and objects. A class is the idea behind a certain kind of 
thing. An object is a concrete instance of a class. The programmer defines a class, and from the class definition, Java makes individual objects.
Example:
	Account number	|	Type	|	Balance
		123				Check		100
		456				Credit		200
		789				Debit		300
Think of the table’s column headings as a class, and think of each row of the table as an object. The table’s column headings describe the Account class. Each object in the Account class has an account number, a type, and a balance property. If you opened a new account, you would have another object, and the table would grow an additional row. The new object would be an instance of the same Account class.


Definition:
	+ Object: Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. 
	An object is an instance of a class.
	
	+ Class: A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports. 
	Class can have many sub-class (child class).
	
	+ Methods: A method is basically a list of things to do. Every method has a name,and you tell the computer to do the things in the list by using the method’s name in your program. 
	A class can contain many methods.
	
	+ Instance Variables: Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.
	A variable declared inside a class but not inside any particular method is an instance variable.
	
	+ EX:
		// The main class usually has same name with the java source name: Authenticator.java
		public class Authenticator {
			// The instructions in a method aren’t executed until the method is called into action. 
			// But, if you give a method the name main, that method is called into action automatically.
			public static void main(String args[]) {
				// Declare a variable with value is 10
				int number = 10;
				System.out.println(number);
			}
		}
	
	
Note:
	- Java is case-sensitive language, which means identifier Hello and hello would have different meaning in Java.

	
=========================================================================================================
	Fundamental
=========================================================================================================
Variable:
	- Primitive/Value type variable: A data type is a value type if it holds a data value within its own memory space. It means variables of these data types directly contain their values.
			Type Name 		Example 		Range of Values									Java							
			---------		-------			---------------									---------------
			byte 			42 				–128 to 127										byte i    = 42;
			short 			42 				–32768 to 32767									short i   = 42;
			int 			42 				–2147483648 to 2147483647						int i     = 42;
			long 			42L 			–9223372036854775808 to 9223372036854775807		long i    = 42;
			float 			42.0F			–3.4 × 1038 to 3.4 × 1038						float i   = 42.0;
			double 			42.0			–1.8 × 10308 to 1.8 × 10308						double i  = 42.0;
			char 			'A' 			Thousands of characters, glyphs, and symbols	char i    = 'i';
			boolean 		true 			true, false										boolean i = true;

	- Reference type variable: a reference type doesn't store its value directly. Instead, it stores the address where the value is being stored. In other words, a reference type contains a pointer to another memory location that holds the data.
			Type Name 		Example			Java 		
			---------		-------			-------
			Class			class.java		class Class;
			String			'ABCD'			String i = 'ABCD';
			Array			[1,2,3]			double myList[] = {1, 2, 3} ; // or double myList[] = new double[3]; myList[0] = 1 ; ...
			ArrayList		[1,2,3]			ArrayList<String> myList = new ArrayList<>(); myList.add(1)
	
Operators:
	Operator 	Symbol 							Meaning Example
	-------- 	------							---------------
	== 			is equal to 					numberOfCows == 5
	!= 			is not equal to 				buttonClicked != panicButton
	< 			is less than 					numberOfCows < 5
	> 			is greater than 				myInitial > 'B'
	<= 			is less than or equal to 		numberOfCows <= 5
	>= 			is greater than or equal to 	myInitial >= 'B
	&& 			and						 		5 < x && x < 10
	|| 			or 								x < 5 || 10 < x
	! 			not 							!password.equals("swordfish")

- Compare character: the letters A through Z are stored with numeric codes65 through 90. The letters a through z are stored with codes 97 through 122. That’s why each uppercase letter is smaller than each lowercase letter.

- Be careful when you compare two numbers for equality (with == ) or inequality (with != ) with float number.  For instance, the Fahrenheit equivalent of 21 degrees Celsius is 69.8, and when you calculate 9.0 / 5 * 21 + 32 by hand, you get 69.8. But the condition 9.0 / 5 * 21 + 32 == 69.8 turns out to be false. That’s because, when the computer calculates 9.0 / 5 * 21 + 32 , it gets 69.80000000000001, not 69.8

- Compare String: When you compare two strings with one another, you don’t want to use the double equal sign. Using the double equal sign would ask, “Is this string stored in exactly the same place in memory as that other string?”. Instead, you usuallywant to ask, “Does this string have the same characters in it as that other string?” To ask the second question Java’s String type has a method named equals. EX: password.equals("swordfish") or "swordfish".equals(password)

- Access array value : for (variable-type variable-name : range-of-values) {}
	int guests[] = {1, 4, 2, 0, 2, 1, 4, 3, 0, 2};
	for (int numGuests : guests) {out.print(numGuests);}

- Conditional operator is mini if statement with 1 line: conditionToBeTested? expression1 : expression2
	(a > b) ? "a bigger" : "a smaller"

--------------------------------------------------------------------------------------------
int a = 1;
// Postincrement - The computer adds 1 to the variable’s value before the variable is used in any other part of the statement.
System.out.print(a++);		// 1
//Preincrement - The computer adds 1 to the variable’s value after the variable is used in any other part of the statement.
System.out.print(++a);		// 2		

--------------------------------------------------------------------------------------------
Collection:
	1. Array: Simple fixed sized arrays . Array can contain both primitive data types as well as objects of a class depending on the definition of the array.
		int arr[] = new int[10];
		arr[0] = 1;
		System.out.println(arr[0]);
	
	2. Note: Collection does not store the primitive type value, it converts the primitive value into an object of that type. EX: When we do arraylist.add(1) -> it converts the primitive int data type into an Integer object.
	
	3. ArrayList : Dynamic sized arrays in Java that implement List interface. ArrayList only supports object entries, not the primitive data types (Note: When we do arraylist.add(1); : it converts the primitive int data type into an Integer object)
		ArrayList<Type> arrlist = new ArrayList<Type>();
		arrL.add(1);
		System.out.println(arrL.get(0));
	
	4.  List<E> : An ordered collection that can contain duplicate elements. The user can access elements by their integer index (position in the list - start from 0), and search for elements in the list. List implementation Type uses LinkedList or ArrayList.	 
		List<Type> myList = new ArrayList<Type>();
		myList.add(1);							// Add value 1 to first position
		myList.remove(0);						// Remove the first position of this list
		listA.add(0, "element 0");				// Add a String to first position of the list
		int size = myList.size();				// Get the List Size
		int value = myList.get(0);				// Get the value at the first position 
		myList.clear();							// Remove all value in the list
		for(Type aString : myList) {			// Loop through and show all item of myList
			System.out.println(aString);
		}
	
	5. Set<E> : A collection that contains no duplicate elements (sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element). Set order depends on the implementation. Set implementation Type uses HashSet (unordered), LinkedHashSet (ordered) or TreeSet (sorted by natural order or by provided comparator).
		Set setA = new HashSet();
		mySet.add(1);						// Add new integer object 1.
		mySet.add("WTF");					// Add new String object WTF
		mySet.remove(1);					// Remove object 1
		mySet.remove("WTF");					// Remove object WTF
		for(Object aString : setA){			// Loop through and show all item of mySet
            System.out.println(aString);
        }

=========================================================================================================
	OOP
=========================================================================================================
Because Java is an object-oriented programming language, your primary goal is to describe classes and objects. A class is the idea behind a certain kind of thing. An object is a concrete instance of a class. The programmer defines a class, and from the class definition, Java makes individual objects.

--------------------------------------------------------------------------------------------
Class:
	- A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports. Class can have many sub-class (child class).
	
	- EX:
	// The Account class is public, a public class is available for use by all other classes
	public class Account {
		// A variable declared inside a class but not inside any particular method is a field or instance variable. These are members of this class.
		String name;
		String address;
		double balance;
		
		// display method is public, means any code can call a public method, even if the calling code and the public method belong to two different classes.
		// The word "void" tells Java that when the display method is called, the display method doesn’t return anything.
		public void display() {
			System.out.print(name);				
			System.out.print(" (");
			System.out.print(address);
			System.out.print(") has $");
			System.out.print(balance);
		}
		
		// The word double tells Java that when getInterest method is called, it returns a double value back to the place that called it.
		// The parentheses contain all the things that you pass to the method when you call it.
		public double getInterest(double percentageRate) {
			return balance * percentageRate / 100.00;
		}
	}
- When you declare a class to be public, you must declare the class in a file whose name is exactly the same as the name of the class (but with the .java extension added). For example, if you declare public class MyImportantCode , you must put the class's code in a file named MyImportantCode.java. In other words, you can't declare two public classes in one .java file. 
- The parentheses contain all the things you’re going to pass to the method when you call it.


public class UseAccount {	
	public static void main(String args[]) {
		// reserve the variable name myAccount so that the name can eventually refer to an instance of Account class
		// When a variable has a reference type, simply declaring the variable isn’t enough
		// You don’t get an object until you call a constructor and use the keyword new .
		Account myAccount;	  			
		// myAccount object creates and refers to an instance of Account class
		myAccount = new Account();		
		// yourAccount object creates and now refers to an instance of Account class
		Account yourAccount = new Account();	
		
		myAccount.name = "Barry Burd";
		yourAccount.name = "Allen Spear";
		myAccount.address = "222 Cyberspace Lane";
		yourAccount.address = "999 CMT8";
		myAccount.balance = 24.02;
		yourAccount.balance = 100;
		
		// print out data of myAccount. When you call a method, you put parentheses after the method’s name
		myAccount.display();
		
		out.print(" plus $");
		out.print(myAccount.getInterest(5.00));
		out.println(" interest ")
	}
}

--------------------------------------------------------------------------------------------
- Default access are public, protected and private.
- A private member is only accessible within the same class as it is declared.
- A member with no access modifier is only accessible within classes in the same package.
- A protected member is accessible within all classes in the same package and within subclasses in other packages.
- A public member is accessible to all classes (unless it resides in a module that does not export the package it is declared in).
	
————————————+—————————+—————————————————+———————————————————+———————+
            | Same    | Different Class | Different package | World |			+     : accessible 
            | Class   | Same Package    | But Sub Class	    |       |			blank : not accessible
————————————+—————————+—————————————————+———————————————————+———————+
public      |    +    |        +        |         +         |   +   |
————————————+—————————+—————————————————+———————————————————+———————+
protected   |    +    |        +        |         +         |       |         
————————————+—————————+—————————————————+———————————————————+———————+
no modifier |    +    |        +        |                   |       |    
————————————+—————————+—————————————————+———————————————————+———————+
private     |    +    |                 |                   |       |    

--------------------------------------------------------------------------------------------
Accessor (getters) and Mutator (setters) method: 
	- One of the ways we can enforce data encapsulation is through the use of accessors and mutators.
	- The role of accessors and mutators are to return and set the values of an object's state.
	- EX:
	public class Account {
		// The word private tells Java that no code outside of the class can make direct reference to that field
		private String name;
		private String address;

		public void setName(String n) {
		name = n;
		} 
		public String getName() {
		return name;
		}
		
		public void setAddress(String a) {
		address = a;
		} 
		public String getAddress() {
		return address;
		}
	}
	
	public class UseAccount {
		public static void main(String args[]) {
			Account myAccount = new Account();
			myAccount.setName("Barry Burd");
			myAccount.setAddress("222 Cyberspace Lane");
			
			out.print(myAccount.getName());
			out.print(" (");
			out.print(myAccount.getAddress());
		}
	}
--------------------------------------------------------------------------------------------
Sub Class (Inheritance):
	- Sub class has all public/protected attributes and method from the parent class. 
	- Subclasses don’t inherit constructors so we have to setup manually.
	- To access the parent class’s private fields, the child class has to call the parent class’s accessor methods.
	- Keyword 'extend' is used for creating a sub class. 
	- Java only allow for single inheritance, for multiple inheritance use interface.
	- EX: create a sub/child class FullTimeEmployee from parent/super class Employee
		public class FullTimeEmployee extends Employee {
			public paySalary(int hour){};
		};
	- Overriding Existing Methods from partent class:
		public class FullTimeEmployeeWithOvertime extends Employee {
			@Override		// this annotation is optional, code will work if method has same parent method name
			public paySalary(int hour){ //pay double };
		};
	
--------------------------------------------------------------------------------------------
Constructors:
	- A constructor tells the Java to perform a new object’s start-up tasks.
	- A class can have multiple constructors. Each constructor has different parameter list, each parameter is separated from another with a comma. To call a specific constructor, you have to match the parameters in the call with the parameters in the declaration.
	- When there is no constructor declarations in the code, Java automatically creates a default constructor (no parameter) for that class.
	- EX:
		public class Temperature() {
			private double temp = 0;
			private string location;
			
			// Constructor method 1 with no parameter
			public Temperature(){ };
			// Constructor method 2 with 1 parameter
			public Temperature(double t){ 
				// this keyword refers the new object’s field
				this.temp = t;
			};
			// Constructor method 3 with 2 parameter
			public Temperature(double t, string l){ 
				this.temp = t;
				this.location = l;
			};
		}
		
		public class UseTemperature(){
			// Initiate temp object via constructor method 1
			Temperature temp = new Temperature();
			// Initiate temp1 object via constructor method 1
			Temperature temp1 = new Temperature(31.1);
			// Initiate temp2 object via constructor method 1
			Temperature temp2 = new Temperature(100.0, 'Hell');
		}
	- Constructor for sub class:
		public class TemperatureGood extends Temperature {
			public TemperatureGood(){ 
				super(); 		// re-use parent constructor
			}
			public TemperatureGood(double t){ 
				super(t); 		// TemperatureGood has temp and location variable 
			}
			public TemperatureGood(double t, string l){ super(t, l); }
			public void display() {
				out.printf("%5.2f degrees %s\n", getNumber(), getScale());
			}
		}

--------------------------------------------------------------------------------------------
Package: 
	- Package is a grouping of related types (classes, interfaces, enumerations and annotations) providing access protection and namespace management.
	- Packages are used in Java in order to prevent naming conflicts, to control access, to make searching/locating and usage of classes, interfaces, enumerations and annotations easier, etc.
	- To create a package, you include "package" statement along with package name at the first line of every source files that you want to include in the same package. EX: package com.test.dung
	- If a package statement is not used then the class, interfaces, enumerations, and annotation types will be placed in the current default package.

--------------------------------------------------------------------------------------------
Java annotation:
	- Java annotations are used to provide meta data for your Java code. Meta data is instructions helper for coding error.
	- Java annotations do not directly affect the execution of your code, although some types of annotations can actually be used for that purpose.
	- Java's annotations are optional and you can create your own annotation.
	- Example of annotation:
		@Override tells the Java compiler to be on the lookout for a common coding error. The annotation says, “Make sure that the method immediately following this annotation has the same stuff (the same name, the same parameters, and so on) as one of the methods in the superclass. If not, then display an error message.”	For example if we error use public paySalary(double hour){}, the compiler reminds me that my new paySalary method doesn't really override anything of it parent method.
		
		@Deprecated is used to mark a class, method or field as deprecated, meaning it should no longer be used. If your code uses deprecated classes, methods or fields, the compiler will give you a warning.
		
		@SuppressWarnings tell Java not to remind you that your program contains certain questionable code (not to display a warning in the consolde).
		
--------------------------------------------------------------------------------------------
ENUM type:
	- Enum is a special Java type used to define collections of constants.
	- An enum can contain constants, methods etc...
	- EX:
		// Like the declaration of a class, an enum type declaration belongs in a file all its own, so this should belong to Level.java file
		public enum Level {
			HIGH (1), 		//calls constructor with value 1
			MEDIUM (2), 	//calls constructor with value 2
			LOW (3)			//calls constructor with value 3
			; 				// semicolon needed when fields - methods follow

			private final int levelCode;
			// Enum constructor
			Level(int levelCode) {
				this.levelCode = levelCode;
			}
			// Enum method
			public int getLevelCode() {
				return this.levelCode;
			}
		}
		
		public class Temp {
			public static void main(String args[]) {
				// Declares variable level to be of type Level mean level only has 3 kind of values in enum
				Level level = Level.HIGH;
				// Get of all the possible values of a Enum type (array result) by calling its static values() method
				for (Level level : Level.values()) {
					System.out.println(level);
				}
				// call an enum method via a reference to one of the constant values
				System.out.println(level.getLevelCode());
			}
		}

--------------------------------------------------------------------------------------------
Interface

--------------------------------------------------------------------------------------------
Final keyword: indicates that the value of format can’t be changed (You cannot assign new value to this variable). EX:
	int i = 1; i = 2; System.out.println(i);		// 2
	final int j =1 ; j = 2; System.out.println(j);	// cannot assign a value to final variable j

--------------------------------------------------------------------------------------------
Super keyword: is a reference variable which is used to refer immediate parent class object.
	1. Super can be used to refer immediate parent class instance variable.
		public class Animal { String color="white"; }  
		
		public class Dog extends Animal {  
			String color="black";  
			void printColor(){  
				System.out.println(color);			//prints color of Dog class  
				System.out.println(super.color);	//prints color of Animal class  
			}  
		}  
		
		class TestSuper1{  
			public static void main(String args[]){  
			Dog d=new Dog();  
			d.printColor();  
		}}  
	2. Super can be used to invoke immediate parent class method.
		class Animal{  
			void eat() { System.out.println("eating..."); }  
		}  
		
		class Dog extends Animal{  
			void eat(){System.out.println("eating bread...");}  
			void bark(){System.out.println("barking...");}  
			void work(){ super.eat(); }
			bark();  
		}  
		
		class TestSuper2{  
			public static void main(String args[]){  
				Dog d=new Dog();  
				d.work();  
		}}  
	3. Super() can be used to invoke immediate parent class constructor.
	4. Note: super() is added in each class constructor automatically by compiler if there is no super() or this().

--------------------------------------------------------------------------------------------
Static keyword: 
	- Anything that’s declared to be static belongs to the whole class, not to any particular instance of the class.
	- We can apply java static keyword with variables (class variable), method (class method), package, blocks and nested class.
	- A static variable/method can be invoke without creating a instance of that class.
	
	1. Java static variable:
		- The static variable can be used to refer the common property of all objects (that is not unique for each object) 
		- The static variable gets memory only once in class area at the time of class loading.
		- EX: If you have 100 students in a school which have same school name. It will be better to declare a common variable for school name (class variable) instead initilizes 100 intances variable school name for each student.
			class Student8{  
				int rollno; String name;  
				static String college ="ITS";  
				 
				Student8(int r,String n){  
					rollno = r;  name = n;  
				}  
				void display (){System.out.println(rollno+" "+name+" "+college);}  
			  
				public static void main(String args[]){  
					Student8 s1 = new Student8(111,"Karan");  
					s1.display();  		//  Output:111 Karan ITS
				}  
			}  
	2. Java static method:
		- A static method belongs to the class rather than object of a class.
		- A static method can be invoked without the need for creating an instance of a class.
		- Static method can access static data member and can change the value of it.
		- There are two main restrictions for the static method:
			. The static method can not use non static data member or call non-static method directly.
			. this and super cannot be used in static context.
		- EX:
			class Student9{  
				int rollno;  String name;  
				static String college = "ITS";  
				   
				static void change(String newName){  
					college = newName;
				}  
			  
				Student9(int r, String n){  
					rollno = r;  name = n;  
				}  
			  
				void display (){System.out.println(rollno+" "+name+" "+college);}  
			  
				public static void main(String args[]){  
					Student9 s1 = new Student9 (111,"Karan"); 
					s1.display();  								// Output: 111 Karan ITS
					
					Student9.change("ABC");  					// Static method is called without creating an instance
					Student9 s2 = new Student9 (222,"Aryan");
					s2.display();  								// Output: 222 Aryan BBDIT
				}  
			}  
	3. Java static import:
		- static import: allows unqualified access to static members of other classes.
		- Note: static import can make your code confusing to read.
		- EX:
			import java.lang.Math;
			...
			System.out.println("round " + Math.round(1032.897));  // OK
			System.out.println("round1 " + round(60,102));		  // Error: The message was non-static variable or method cannot be referenced from a static context
			-------------
			import static java.lang.Math.round;
			...
			System.out.println("round " + Math.round(1032.897));  // Error: The message was non-static variable or method cannot be referenced from a static context
			System.out.println("round1 " + round(60,102));		  // OK
	
--------------------------------------------------------------------------------------------
this keyword: is a reference variable in Java that refers to the current object (https://www.javatpoint.com/this-keyword)
	1) this: to refer current class instance variable
		- The this keyword can be used to refer current class instance variable. If there is ambiguity between the instance variables and parameters, this keyword resolves the problem of ambiguity.
		- It is better approach to use meaningful names for variables. So we use same name for instance variables and parameters in real time, and always use this keyword.
		- EX:
			// Parameters (formal arguments) and instance variables are same name. 
			class Student{  
				int rollno;  
				String name;  
				Student(int rollno,String name){  
					rollno=rollno;  
					name=name;  
				}  
				void display(){System.out.println(rollno+" "+name);}  
			}
			// So, we are using this keyword to distinguish local variable and instance variable
			class Student1{  
				int rollno;  
				String name;  
				Student(int rollno,String name){  
					this.rollno=rollno;  
					this.name=name;  
				}  
				void display(){System.out.println(rollno+" "+name);}  
			}
			// If local variables(formal arguments) and instance variables are different, there is no need to use this keyword
			class Student2{  
				int rollno;  
				String name;  
				Student(int roll_number,String name_student){  
					rollno=roll_number;  
					name=name_student;  
				}  
				void display(){System.out.println(rollno+" "+name);}  
			}
			class TestThis1{  
				public static void main(String args[]){  
					Student  s1 = new Student(111,"A");
					Student1 s2 = new Student1(222,"B");
					Student2 s3 = new Student2(333,"C");
					s1.display();  						// Output:	0 null
					s2.display();  						// Output:	222 B
					s3.display();  						// Output:	333 C
				}
			}  
	2) this: to invoke current class method
		- You may invoke the method of the current class by using the this keyword. 
		- If you don't use the this keyword, compiler automatically adds this keyword while invoking the method. 
		- EX: 
			class A{  
				void m(){System.out.println("hello m");}  
				void n(){  
					System.out.println("hello n");  
					this.m();  
			}}  
			class TestThis4{  
				public static void main(String args[]){  
					A a=new A();  
					a.n();  							// Output: hello n hello m
			}}  
	3) this() : to invoke current class constructor
		- The this() constructor call can be used to invoke the current class constructor. 
		- It is used to reuse the constructor. In other words, it is used for constructor chaining.
		- EX:
			class A{  
				A(){System.out.println("hello a");}  
				A(int x){  
					this(); 							// Call to this() must be the first statement in constructor. Call the above constructor 
					System.out.println(x);  
			}}  
			class TestThis5{  
				public static void main(String args[]){  
				A a=new A(10);  						// Output: hello a 10
			}}  
			
--------------------------------------------------------------------------------------------
Exceptions:
	- An exception (or exceptional event) is a problem that arises during the execution of a program. 
	- When an Exception occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore, these exceptions are to be handled.
	- An exception can occur for many different reasons. Following are some scenarios where an exception occurs:
		1. A user has entered an invalid data.
		2. A file that needs to be opened cannot be found.
		3. A network connection has been lost in the middle of communications or the JVM has run out of memory.
	- Build-in Exception in Java:
		1. Arithmetic Exception:  It is thrown when an exceptional condition has occurred in an arithmetic operation.
		2. IOException:           It is thrown when an input-output operation failed or interrupted
		3. InterruptedException:  It is thrown when a thread is waiting , sleeping , or doing some processing , and it is interrupted.
		4. NoSuchFieldException:  It is thrown when a class does not contain the field (or variable) specified
		5. NoSuchMethodException: It is thrown when accessing a method which is not found.
		6. NullPointerException:  This exception is raised when referring to the members of a null object. Null represents nothing
		7. NumberFormatException: This exception is raised when a method could not convert a string into a numeric format.
		8. RuntimeException:      This represents any exception which occurs during runtime.
		9. FileNotFoundException: This Exception is raised when a file is not accessible or does not open.
		10. ClassNotFoundException:          This Exception is raised when we try to access a class whose definition is not found
		11. StringIndexOutOfBoundsException: It is thrown by String class methods to indicate that an index is either negative than the size of the string
		12. ArrayIndexOutOfBoundException:   It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.
	- Create custom exception:
		public class NewException() extends Exception {}
	- EX:
		import java.io.File;
		import java.io.IOException;
		import java.util.Scanner;
		public class Main {
			public static void main(String args[]) {
			Scanner scan1 = null;
			Scanner scan2 = null;
			try {
				scan1 = new Scanner(new File("File1.txt"));
				scan2 = new Scanner(new File("File2.txt"));
				// Do useful stuff
			} catch (IOException e) {					// Only execute when corespond exception is thrown
				// Oops!
			} finally {									// Finally is optional and codes insde alway execute
				scan1.close();
				scan2.close();
				System.out.println("Done!");
		} } }
		
--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------